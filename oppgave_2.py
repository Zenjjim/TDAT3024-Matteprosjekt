# -*- coding: utf-8 -*-
"""Oppgave_2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A00C1u2zWht0X2NKlxBYY5PzSRoQsFhx
"""

import numpy as np
from numpy import vectorize
from scipy.integrate import quad
from copy import deepcopy

indentity = np.identity(3)
L = np.array([1,0,0])
X = indentity
I = indentity

def omega (X, I, L):
  return np.dot(np.linalg.inv((np.dot(X, I))), L)

def dX (X, omega_i):
  Omega = np.matrix([[0, -omega_i[2], omega_i[1]],
                    [omega_i[2], 0, -omega_i[0]],
                    [-omega_i[1], omega_i[0], 0]])
  return np.dot(X, Omega)

# Antar at dX kun har reele verdier
def integrate (dX, t):
  X_t = deepcopy(dX)
  for row in X_t:
    for index in row:
      index *= t
  return X_t

omega_i = omega(X, I, L)
dX_t = dX(X, omega_i)
X = integrate(dX_t, 2)
print(dX_t)
print(X)